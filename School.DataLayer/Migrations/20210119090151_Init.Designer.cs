// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.DataLayer.Models;

namespace School.DataLayer.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20210119090151_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DbStudentDbVak", b =>
                {
                    b.Property<int>("StudentenPersoonId")
                        .HasColumnType("int");

                    b.Property<int>("VakkenVakId")
                        .HasColumnType("int");

                    b.HasKey("StudentenPersoonId", "VakkenVakId");

                    b.HasIndex("VakkenVakId");

                    b.ToTable("DbStudentDbVak");
                });

            modelBuilder.Entity("School.DataLayer.Models.DbPersoon", b =>
                {
                    b.Property<int>("PersoonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Familienaam")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("GeboorteDatum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 1, 19, 0, 0, 0, 0, DateTimeKind.Local));

                    b.Property<string>("Voornaam")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PersoonId");

                    b.ToTable("Persoon");
                });

            modelBuilder.Entity("School.DataLayer.Models.DbSchool", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Naam")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SchoolId")
                        .HasName("PK_School");

                    b.ToTable("School");
                });

            modelBuilder.Entity("School.DataLayer.Models.DbVak", b =>
                {
                    b.Property<int>("VakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte>("AantalLesuren")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Naam")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("VakId")
                        .HasName("PK_Vak");

                    b.ToTable("Vak");
                });

            modelBuilder.Entity("School.DataLayer.Models.DbDocent", b =>
                {
                    b.HasBaseType("School.DataLayer.Models.DbPersoon");

                    b.Property<int?>("DbSchoolSchoolId")
                        .HasColumnType("int");

                    b.Property<decimal>("Uurloon")
                        .HasPrecision(2, 2)
                        .HasColumnType("Decimal(2,2)");

                    b.HasIndex("DbSchoolSchoolId");

                    b.ToTable("Docent");
                });

            modelBuilder.Entity("School.DataLayer.Models.DbStudent", b =>
                {
                    b.HasBaseType("School.DataLayer.Models.DbPersoon");

                    b.Property<int?>("DbSchoolSchoolId")
                        .HasColumnType("int");

                    b.HasIndex("DbSchoolSchoolId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("DbStudentDbVak", b =>
                {
                    b.HasOne("School.DataLayer.Models.DbStudent", null)
                        .WithMany()
                        .HasForeignKey("StudentenPersoonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.DataLayer.Models.DbVak", null)
                        .WithMany()
                        .HasForeignKey("VakkenVakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("School.DataLayer.Models.DbDocent", b =>
                {
                    b.HasOne("School.DataLayer.Models.DbSchool", null)
                        .WithMany("Docenten")
                        .HasForeignKey("DbSchoolSchoolId");

                    b.HasOne("School.DataLayer.Models.DbPersoon", null)
                        .WithOne()
                        .HasForeignKey("School.DataLayer.Models.DbDocent", "PersoonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("School.DataLayer.Models.DbStudent", b =>
                {
                    b.HasOne("School.DataLayer.Models.DbSchool", null)
                        .WithMany("Studenten")
                        .HasForeignKey("DbSchoolSchoolId");

                    b.HasOne("School.DataLayer.Models.DbPersoon", null)
                        .WithOne()
                        .HasForeignKey("School.DataLayer.Models.DbStudent", "PersoonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("School.DataLayer.Models.DbSchool", b =>
                {
                    b.Navigation("Docenten");

                    b.Navigation("Studenten");
                });
#pragma warning restore 612, 618
        }
    }
}
